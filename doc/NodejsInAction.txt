(ドキュメント、参考)

・Javascriptリファレンス
	https://developer.mozilla.org/ja/docs/Web/JavaScript

・Node.js v8.9.2 Documentation
	https://nodejs.org/docs/latest-v8.x/api/index.html

・socket.io
	https://socket.io/docs/#

・mime
	https://www.npmjs.com/package/mime

・request
	https://github.com/request/request

・htmlparser
	https://github.com/maierfelix/htmlparse#readme
  https://github.com/tautologistics/node-htmlparser
  
・Express4.16.1
　Fast, unopinionated, minimalist web framework for Node.js 
	http://expressjs.com/
	
・Node.js MongoDB Driver API（node-mongodb-native）

	http://mongodb.github.io/node-mongodb-native/2.0/api/index.html

・Mongooseドキュメント
	http://mongoosejs.com/docs/guide.html

・node_redis
	https://github.com/NodeRedis/node_redis

・Express 4 への移行
	http://expressjs.com/ja/guide/migrating-4.html
	
・expressjs/body-parser
	https://github.com/expressjs/body-parser

・expressjs/morgan
	https://github.com/expressjs/morgan
	
・expressjs/serve-favicon 
	https://github.com/expressjs/serve-favicon

・expressjs/method-override 
	https://github.com/expressjs/method-override		

・expressjs/vhost 
	https://github.com/expressjs/vhost

・expressjs/session 
	https://github.com/expressjs/session

・tj/connect-redis 
	https://github.com/tj/connect-redis

・expressjs/basic-auth-connect 
	https://github.com/expressjs/basic-auth-connect
	
・expressjs/csurf 	
	https://github.com/expressjs/csurf
	
・expressjs/errorhandler 
	https://github.com/expressjs/errorhandler

・expressjs/serve-static 
	https://github.com/expressjs/serve-static

・expressjs/compression 
	https://github.com/expressjs/compression
	
・expressjs/serve-index 
	https://github.com/expressjs/serve-index
	
・ejs
	https://github.com/mde/ejs
	
・hogan
	https://github.com/twitter/hogan.js/

・jade（rename to pug）
	https://github.com/pugjs/pug	
	http://jade-lang.com/


（環境）

node, npm：(2018.01.22)
	参考：https://qiita.com/seibe/items/36cef7df85fe2cefa3ea
			「Ubuntuに最新のNode.jsを難なくインストールする」
	参考：https://www.trifields.jp/how-to-install-node-js-on-ubuntu1604-2680
			「Ubuntu16.04で任意のバージョンのNode.jsをインストールする方法」
	コマンド：
		$ sudo apt-get install -y nodejs npm
		$ sudo npm cache clean
		$ sudo npm install n -g
		$ sudo n stable
		$ node -v
		$ sudo ln -sf /usr/local/bin/node /usr/bin/node
		$ sudo n lts
		$ node -v
	バージョン：
		v8.9.4


MySQL:
	ダウンロードページ；	https://dev.mysql.com/downloads/
	バージョン： 			5.7.20
	インストールフォルダ：	C:\Program Files\MySQL
	
Redis
	ダウンロードページ：	https://github.com/MicrosoftArchive/redis/releases
	バージョン				3.2.100
	インストールフォルダ	C:\Program Files\Redis\


（履歴）

第1章　Node.jsに、ようこそ！

2018.01.22	1.5.1:単純な非同期のサンプル、1.5.2:"Hello World" HTTPサーバー
			1.5.3:データのストリーミング

第2章　マルチルーム・チャットアプリケーションの構築

2018.01.28
			2.1:アプリケーションの概要、2.2:アプリケーションの要件と初期設定
			2.3:HTML、CSS、クライアントサイドJavaScriptを提供する
2018.01.29、2018.01.29
			2.4:チャット関係のメッセージンぐをSocket.IOで処理する
			2.5:アプリケーションのUIにはクライアントサイドJavaScriptを使う

第3章　Nodeプログラミングの基礎知識

2018.02.02	3.1:Nodeの機能を組織化して再利用する
2018.02.02、2018.02.03	
			3.2:非同期プログラミングの技術
2018.02.03、2018.02.04
			3.3:非同期ロジックをシーケンス化する
			

第4章　Webアプリケーションの構築

2018.02.05	4.1:HTTPサーバーの基礎
2017.02.06	4.2:RESTful Web サービスを構築する
＠＠＠＠＠　ここまで　＠＠＠＠＠＠
2017.11.18	4.3:静的ファイルの供給
			4.4:ユーザ入力をフォームから受け取る
			4.5:HTTPSでアプリケーションのセキュリティを確保する

第5章　アプリケーションのデータをストアする

2017.11.19	5.1:サーバーレスデータストレージ
2017.11.19、2017.11.20、2017.11.21、2017.11.22
			5.2:リレーショナルデータベース管理システム
			(5.2.2:PostreSQL はスキップ)
2017.11.23、2017.11.24、2017.11.25、2017.11.26
			5.3:NoSQLデータベース
2017.11.28、2017.11.29
			timetrackをazureにデプロイ（web+mysql）
2017.11.30	redis_basics.jsのredisをazureにデプロイ
2017.12.03	monogo_sample, mongoose_sampleのMongoDBをazureにデプロイ

第6章　Connect

2017.12.03	6.1:Connectアプリケーションのセットアップ、
			6.2:Connectミドルウェアの仕組み
2017.12.05	6.3:なぜミドルウェアの実行順序が重要なのか
			6.4:ミドルウェアとサーバーをマウントする
2017.12.06、2017.12.07
			6.5:設定変更可能なミドルウェアの作成
2017.12.07、2017.12.10
			6.6:エラー処理のミドルウェアを使う（6.6.2:まで）

第7章　Connectの組み込みミドルウェア

2017.12.10、2017.12.11、2017.12.12、2017.12.16
			7.1:クッキー、リクエスト本体、クエリ文字列の解析
2017.12.17、2017.12.18、2017.12.19
			7.2:Webアプリケーションのコア機能を実装するミドルウェア
2017.12.20、2017.12.21
			7.3:Webアプリケーションのセキュリティを扱うミドルウェア
2017.12.22	7.4:静的ファイルを供給するミドルウェア

第8章　Express

2017.12.23	8.1:アプリケーションのスケルトンを生成する
			8.2:Expressとアプリケーションのコンフィグレーション
2017.12.24、2017.12.25
			8.3:ビューのレンダリング
			8.4:フォームとファイルのアップロードを処理する
			8.5:リソースのダウンロードを処理する

第9章　Expressの高度な使い方

2017.12.26、2017.12.30	
			9.1:ユーザ認証
2017.12.31、2018.01.01
			9.2:高度なルーティング技術
2018.01.02	9.3:パブリックなREST APIを作る
			9.4:エラー処理

第10章　Nodeアプリケーションをテストする

2018.01.07、2018.01.08
			10.1:単体テスト

第11章　Webアプリケーションでテンプレートを使う

2018.01.08	11.1:テンプレートを使ってコードをクリーンな状態にしておく
2018.01.09、2018.01.10
			11.2:EJSで行うテンプレーティング
2018.01.11	11.3:Hoganでテンプレート言語Mustacheを使う
2018.01.13、2018.01.14、2018.01.15、2018.01.16
			11.4:Jadeで行うテンプレーティング

第13章　WebサーバーばかりがNodeではない

2018.01.17	13.1:Socket.IO
2018.01.18	13.2:TCP/IPネットワーキングの細部
2018.01.18、2018.01.20、2018.01.21
			13.3:OSとの相互作用を行うためのツール
2018.01.21	13.4:コマンドラインツールを利用する
